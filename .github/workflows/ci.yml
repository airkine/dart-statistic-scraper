name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  OWNER: airkine
  REPO: dart-statistic-scraper
  GO111MODULE: "on"
  GO_VERSION: '1.20'
  GOLANGCI_LINT_VERSION: 'v1.54.2'

jobs:
  ci:
    name: CI
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for git describe to work correctly

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache: true # Enable integrated module caching

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Cache binaries
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/bin
          key: ${{ runner.os }}-bin-${{ hashFiles('**/go.mod') }}
          restore-keys: |
            ${{ runner.os }}-bin-

      # - name: Install golangci-lint
      #   run: |
      #     mkdir -p ${{ github.workspace }}/bin
      #     curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b ${{ github.workspace }}/bin ${{ env.GOLANGCI_LINT_VERSION }}
      #     echo "${{ github.workspace }}/bin" >> $GITHUB_PATH

      # - name: Lint
      #   run: |
      #     go mod tidy
      #     go fmt ./...
      #     go vet ./...
      #     golangci-lint run

      # - name: Run tests
      #   run: go test -v ./... -coverprofile=coverage.txt -covermode=atomic

      # - name: Upload coverage report
      #   uses: codecov/codecov-action@v4
      #   with:
      #     file: ./coverage.txt
      #     fail_ci_if_error: false
      #     verbose: true

      - name: Build
        run: |
          mkdir -p bin
          go build -ldflags "-X main.version=$(git describe --tags || echo 'dev')" -o ./bin/dart-scraper ./cmd/dart-scraper

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.OWNER }}/dart-statistic-scraper
          tags: |
            type=semver,pattern={{version}}
            type=sha,prefix=sha-,format=short
            type=ref,event=branch
            type=ref,event=pr

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            GO_VERSION=${{ env.GO_VERSION }}

      - name: Upload binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: dart-scraper-binary
          path: ./bin/dart-scraper
          retention-days: 7
          
      - name: Generate version from date
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        id: generate_version
        run: |
          DATE_VERSION="v$(date +'%Y.%m.%d')"
          BUILD_NUMBER=$(date +'%H%M')
          VERSION="${DATE_VERSION}.${BUILD_NUMBER}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Generated version: ${VERSION}"
          
      - name: Create and push tag
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        run: |
          VERSION=${{ steps.generate_version.outputs.version }}
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a $VERSION -m "Release $VERSION"
          git push origin $VERSION

  release:
    name: Release
    needs: ci
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache: true

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}